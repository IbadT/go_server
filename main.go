package main

// –Ω–∞–ø–∏—Å–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∏–∑ —É—Ä–æ–∫–æ–≤

import (
	"net/http"
	"strconv"

	"github.com/labstack/echo/v4"
)

type Message struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
}

type Response struct {
	Status  string `json:"status"`
	Message string `json:"message"`
}

// var messages []Message
var messages = make(map[int]Message)
var nextID = 1

func GetHandler(c echo.Context) error {
	var msgSlice []Message
	for _, msg := range messages {
		msgSlice = append(msgSlice, msg)
	}
	return c.JSON(http.StatusOK, &messages)
}

func PostHandler(c echo.Context) error {
	var message Message

	if err := c.Bind(&message); err != nil {
		return c.JSON(http.StatusBadRequest, Response{
			Status:  "Error",
			Message: "Could not add the message",
		})
	}

	message.ID = nextID

	messages[message.ID] = message
	// messages = append(messages, message)

	nextID++

	return c.JSON(http.StatusOK, Response{
		Status:  "ok",
		Message: "Success",
	})
}

func PatchHandler(c echo.Context) error {
	idParam := c.Param("id")
	id, err := strconv.Atoi(idParam)
	if err != nil {
		return c.JSON(http.StatusBadRequest, Response{
			Status:  "Error",
			Message: "–ù–µ–≤–µ—Ä–Ω—ã–π id",
		})
	}

	var updatedMessage Message
	if err := c.Bind(&updatedMessage); err != nil {
		return c.JSON(http.StatusBadRequest, Response{
			Status:  "Error",
			Message: "Could not update the message",
		})
	}

	// for i, message := range messages {
	// 	if message.ID == id {
	// 		updatedMessage.ID = id
	// 		messages[i] = updatedMessage
	// 		updated = true
	// 		break
	// 	}
	// }

	if _, exists := messages[id]; !exists {
		return c.JSON(http.StatusBadRequest, Response{
			Status:  "Error",
			Message: "Message was not found",
		})
	}

	updatedMessage.ID = id
	messages[id] = updatedMessage

	return c.JSON(http.StatusOK, Response{
		Status:  "ok",
		Message: "Message was updated",
	})
}

func DeleteHandle(c echo.Context) error {
	idParam := c.Param("id")
	id, err := strconv.Atoi(idParam)
	if err != nil {
		return c.JSON(http.StatusBadRequest, Response{
			Status:  "Error",
			Message: "–ù–µ–≤–µ—Ä–Ω—ã–π id",
		})
	}

	if _, exist := messages[id]; !exist {
		return c.JSON(http.StatusBadRequest, Response{
			Status:  "Error",
			Message: "Message was not found",
		})
	}
	delete(messages, id)
	return c.JSON(http.StatusOK, Response{
		Status:  "ok",
		Message: "Message was successfully deleted",
	})
}

// var counter int
// func GetHandler(w http.ResponseWriter, r *http.Request) {
// 	if r.Method == http.MethodGet {
// 		fmt.Println(w, "Counter —Ä–∞–≤–µ–Ω", strconv.Itoa(counter))
// 	} else {
// 		fmt.Println(w, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ GET")
// 	}
// }
// func PostHandler(w http.ResponseWriter, r *http.Request) {
// 	if r.Method == http.MethodPost {
// 		counter++
// 		fmt.Println(w, "Counter —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1")
// 	} else {
// 		fmt.Println(w, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ POST")
// 	}
// }

func main() {
	e := echo.New()

	e.GET("/messages", GetHandler)
	e.POST("/messages", PostHandler)
	e.PATCH("/messages/:id", PatchHandler)
	e.DELETE("/messages/:id", DeleteHandle)

	e.Start(":8080")

	// http.HandleFunc("/get", GetHandler)
	// http.HandleFunc("/post", PostHandler)
	// http.ListenAndServe("localhost:8080", nil)
}

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

// package main

// import (
// 	"log"

// 	"github.com/IbadT/go_server/database"
// 	"github.com/gofiber/fiber/v2/middleware/limiter"
// 	"github.com/gofiber/fiber/v2/middleware/recover"
// 	"github.com/gofiber/fiber/v3"
// 	"github.com/gofiber/fiber/v3/middleware/compress"
// 	"github.com/gofiber/fiber/v3/middleware/logger"
// )

// func main() {

// 	if err := database.Connect(); err != nil {
// 		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
// 	}
// 	app := fiber.New(fiber.Config{
// 		// // Prefork –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
// 		// Prefork:       true,  // –≤–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –º–Ω–æ–≥–æ—è–¥–µ—Ä–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö
// 		ServerHeader:  "Fiber", // –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
// 		CaseSensitive: true,    // –≤–∫–ª—é—á–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –≤ URL
// 		StrictRouting: true,    // –≤–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
// 	})

// 	// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
// 	app.Use(logger.New())   // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
// 	app.Use(compress.New()) // –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
// 	app.Use(recover.New())  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∞–Ω–∏–∫–∏
// 	app.Use(limiter.New())  // –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è DDOS –∞—Ç–∞–∫

// 	routes.RegisterProductRoutes(app)

// 	//

// 	// –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–π –∑–∞—â–∏—Ç—ã.
// 	// app.Use(func(c fiber.Ctx) error {
// 	// 	println("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω")
// 	// 	return c.Next() // –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
// 	// })

// 	// app.Get("/", func(c fiber.Ctx) error {
// 	// 	return c.SendString("Hello, Fiber!")
// 	// })

// 	// app.Get("/users/:id", func(c fiber.Ctx) error {
// 	// 	id := c.Params("id")
// 	// 	return c.SendString("User ID: " + id)
// 	// })

// 	// app.Get("/async", func(c fiber.Ctx) error {
// 	// 	go func() {
// 	// 		time.Sleep(2 * time.Second)
// 	// 		println("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
// 	// 	}()
// 	// 	return c.SendString("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ!")
// 	// })

// 	// app.Post("/submit", func(c fiber.Ctx) error {
// 	// 	data := new(struct {
// 	// 		Name string `json:"name"`
// 	// 	})
// 	// 	if err := c.Bind().Body(data); err != nil {
// 	// 		return err
// 	// 	}
// 	// 	return c.JSON(fiber.Map{"message": "–ü—Ä–∏–≤–µ—Ç, " + data.Name})
// 	// })

// 	// –û–¥–Ω–∏–º –∏–∑ –±–æ–ª—å—à–∏—Ö –ø–ª—é—Å–æ–≤ Fiber —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ Go.
// 	// Fiber –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ net/http —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏,
// 	// —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏:
// 	// httpHandler := func(w http.ResponseWriter, r *http.Request) {
// 	// 	w.Write([]byte("–ü—Ä–∏–≤–µ—Ç –∏–∑ net/http"))
// 	// }
// 	// app.Get("/legacy", func(c fiber.Ctx) error {
// 	// 	httpHandler(c.Context().Response().Writer, c.Context().Request())
// 	// 	return nil
// 	// })

// 	// Query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ?sort=desc), —Ç–∞–∫–∂–µ –ª–µ–≥–∫–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Fiber:
// 	// app.Get("/query", func(c fiber.Ctx) error {
// 	// 	query := c.Query("q", "default") // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "q", –∑–∞–¥–∞—ë–º "default" –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
// 	// 	return c.SendString("Search string: " + query)
// 	// })

// 	// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞, Fiber –∏–º–µ–µ—Ç —É–¥–æ–±–Ω—ã–π API –¥–ª—è –∏—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:
// 	// app.Get("/headers", func(c fiber.Ctx) error {
// 	// 	userAgent := c.Get("User-Agent") // –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ User-Agent
// 	// 	return c.SendString("Your User-Agent is: " + userAgent)
// 	// })

// 	app.Listen(":8080", fiber.ListenConfig{EnablePrefork: true}) // EnablePrefork - —ç—Ç–æ Prefork –≤ v3
// }

// // package main

// // import (
// // 	"log"

// // 	"github.com/IbadT/go_server/database"
// // 	"github.com/IbadT/go_server/routes"
// // 	"github.com/gofiber/fiber/v3"
// // 	"github.com/gofiber/fiber/v3/middleware/logger"
// // )

// // type User struct {
// // 	ID       string `json:"id"`
// // 	Name     string `json:"name"`
// // 	Login    string `json:"login"`
// // 	Password string `json:"password"`
// // }

// // // var users = []User{
// // // 	{ID: "1", Name: "Eduard", Login: "ibadtoff@gmail.com", Password: "gts530200"},
// // // }

// // func main() {
// // 	app := fiber.New()

// // 	database.Connect()

// // 	// middleware
// // 	app.Use(logger.New())

// // 	routes.Setup(app)

// // 	// // xh http://localhost:3000/api
// // 	// app.Get("/api", func(c fiber.Ctx) error {
// // 	// 	return c.SendString("Hello, World üëã!")
// // 	// })

// // 	// // xh http://localhost:3000/api/Eduard
// // 	// app.Get("/api/:name", func(c fiber.Ctx) error {
// // 	// 	msg := fmt.Sprintf("Hello %s üëã", c.Params("name"))
// // 	// 	return c.SendString(msg)
// // 	// })

// // 	// app.Get("/api/users", getUsers)

// // 	// middleware
// // 	// app.Use(func(c fiber.Ctx) error {
// // 	// 	return c.SendStatus(404)
// // 	// })

// // 	// app.Listen(":3000")
// // 	log.Fatal(app.Listen(":3000"))
// // }

// // // go mod init github.com/your/repo
// // // go get -u github.com/gofiber/fiber/v3
// // // https://github.com/IbadT/go_server.git
// // // go get -u gorm.io/gorm
// // // go get -u gorm.io/driver/postgres
